filenames <- unlist(files_to_download)
View(files_to_download)
for (name in names(files_to_download)) {
filename <- files_to_download[[name]]
download.file(url, destfile = system.file("extdata", filename, package = pkgname), method = "auto")
}
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
warnings()
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
warnings()
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
warnings()
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
download.file("https://drive.google.com/file/d/1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj/view?usp=sharing", destfile = system.file("extdata", "afforestation.gpkg", package = "RStoolboxExtensions"), method = "auto")
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
files_to_download <- list(
"afforestation.gpkg" = "https://drive.google.com/file/d/1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj/view?usp=sharing",
"deforestation.gpkg" = "https://drive.google.com/file/d/1qwRf_GFZbMzsIXp6T-NMCeDym5zLgXXF/view?usp=sharing",
"forest.gpkg" = "https://drive.google.com/file/d/1pYiRLYo_bDNt1-Sb3YSj9hrPpoS6HRMK/view?usp=sharing",
"nonforest.gpkg" = "https://drive.google.com/file/d/1SC9Wa2v4YK1CqpxPbH76drJU_e2ZgMDl/view?usp=sharing",
"trainPoints.geojson" = "https://drive.google.com/file/d/1Pr5wfzFOB-cZed2jZhBnmvXTzJAO2Knc/view?usp=sharing",
"trainPolygons.geojson" = "https://drive.google.com/file/d/1WBmg4liu9FRBGT1XCkiMBoHDNj4vwUDJ/view?usp=sharing",
"Sebangau15.tif" = "https://drive.google.com/file/d/1b7HoFh0cvwwwVJagNjnsmacLqyMImjFc/view?usp=sharing",
"Sebangau23.tif" = "https://drive.google.com/file/d/1BRbFncsSfRwMAMrbASploBh8XftTDMsp/view?usp=sharing",
"class_img.tif" = "https://drive.google.com/file/d/1ct7NgIgVfsB4JvgNVOVLd-7LYHl2ktex/view?usp=sharing"
)
names(files_to_download)
?pp_features
?points_superClass
?pp_features
?rename_bands
?calc_indices
?auto_superClass
library(roxygen2)
getwd()
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
download.file("https://drive.google.com/file/d/1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj/view?usp=sharing", destfile = system.file("extdata", "afforestation.gpkg", package = pkgname), method = "auto")
download.file("https://drive.google.com/file/d/1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj/view?usp=sharing", destfile = system.file("extdata", "afforestation.gpkg", package = "RStoolboxExtensions"), method = "auto")
download.file("https://drive.google.com/file/d/1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj/view?usp=sharing", destfile = system.file("extdata", "afforestation.gpkg", package = "RStoolboxExtensions"))
download.file("https://drive.google.com/file/d/1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj/view?usp=sharing", destfile = system.file("data", "afforestation.gpkg", package = "RStoolboxExtensions"), method = "auto")
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
tryCatch(
{
download.file("https://drive.google.com/file/d/1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj/view?usp=sharing",
destfile = system.file("extdata", "afforestation.gpkg", package = "RStoolboxExtensions"),
method = "auto")
},
error = function(e) {
message("Error downloading file: ", e$message)
}
)
tryCatch(
{
download.file("https://drive.google.com/file/d/1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj/view?usp=sharing",
destfile = system.file("fordata", "afforestation.gpkg", package = "RStoolboxExtensions"),
method = "auto")
},
error = function(e) {
message("Error downloading file: ", e$message)
}
)
getwd()
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
tempdir()
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
system.file("R", "afforestation.gpkg", package = "RStoolboxExtensions")
system.file("extdata", package = "RStoolboxExtensions")
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
#destfile <- file.path(tempdir(), "afforestation.gpkg")
download.file("https://drive.google.com/file/d/1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj/view?usp=sharing",
destfile = paste0(systemfile, "/", "afforestation.gpkg"),
method = "auto")
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
getwd()
forest <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/forest.gpkg")
forest <- terra::rast("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_img.tif")
# Download and save the GeoPackage file
download.file("https://drive.google.com/file/d/1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj/view?usp=sharing", destfile = "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/afforestation.gpkg", method = "auto")
# Download and save the GeoPackage file
download.file("https://drive.google.com/uc?export=download&id=1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj", destfile = "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/afforestation.gpkg", method = "auto")
forest <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/afforestation.gpkg")
st_drivers()
forest <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/localData/afforestation.gpkg")
forest <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/afforestation.gpkg")
forest <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/localData/afforestation.gpkg")
# Download and save the GeoPackage file
download.file("https://drive.google.com/uc?export=download&id=1eP9b1ZUkyMhzqTbJXBdKloQIQMKVMZCj", destfile = "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/afforestation.gpkg", method = "libcurl")
forest <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/afforestation.gpkg")
# Download and save the GeoPackage file
download.file("https://drive.google.com/uc?export=download&id=1Pr5wfzFOB-cZed2jZhBnmvXTzJAO2Knc", destfile = "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/trainPoints.geojson", method = "libcurl")
forest <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/trainPoints.geojson")
plot(forest)
View(forest)
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
polys <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/trainPolygons.geojson")
View(polys)
plot(polys)
plot(forest)
polys <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_img.tif")
library(RStoolboxExtensions)
# import the scene and features
Sebangau <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_23median.tif')
Sebangau_15 <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_15median.tif')
feature_collection <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/exported_feature_collection.geojson")
training_polygons <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/training_polygons.geojson")
# reassigning the landcvoer values to be a character description of the class instead of numerical values
landcover <- c('forest','nonforest','afforestation','deforestation')
feature_collection$landcover <- landcover[feature_collection$landcover]
training_polygons$landcover <- landcover[training_polygons$landcover]
Sebangau15 <- rename_bands(Sebangau_15, sensor = "Landsat8", subsetting = TRUE)
Sebangau15_ind <- calc_indices(Sebangau15, indices = ("evi"))
terra::plot(Sebangau15_ind$EVI)
head(Sebangau15_ind$EVI)
View(Sebangau15_ind$EVI)
output_test <- auto_superClass(Sebangau, Sebangau_15, train_features = feature_collection, responseCol = "landcover", sensor = "Landsat8",
calc_indices = FALSE, indices = c("ndvi", "evi"))
terra::plot(output_test$superClass_img)
output_test$modelFit
points <- pp_features(feature_collection, Sebangau)
output <- points_superClass(Sebangau15_ind, points, responseCol = "landcover")
terra::plot(Sebangau15_ind)
Sebangau_renamed <- rename_bands(Sebangau, sensor = "Landsat8", subsetting = TRUE)
Sebangau_new <- calc_indices(Sebangau_renamed, indices = c("ndvi"))
output_new <- points_superClass(Sebangau_new, points, responseCol = "landcover")
tail(Sebangau15_ind$EVI)
head(Sebangau15_ind$EVI)
?plot
terra::plot(Sebangau15_ind$EVI, range = 0,5)
terra::plot(Sebangau15_ind$EVI, range = c(0,5))
terra::plot(Sebangau15_ind$EVI, range = c(-10,10))
terra::plot(Sebangau15_ind$EVI, range = c(0,100))
terra::plot(Sebangau15_ind$EVI, range = c(0,30))
terra::plot(Sebangau15_ind$EVI, range = c(0,10))
terra::plot(Sebangau15_ind$EVI, range = c(2,6))
x <- Sebangau15_ind$EVI
y <- x[!is.na(x)]
output_new <- points_superClass(x, points, responseCol = "landcover")
terra::plot(output_new$map)
calc_indices <- function(raster, indices = c("ndvi", "ndwi"), L = NULL) {
#### validating the input and stop if something is wrong ####
if (missing(raster)) {
stop("raster input missing")
}
if (!is.character(indices)) {
stop("Parameter 'indices' must be a character vector.")
}
# handle case sensibility of indices input
indices = tolower(indices)
# check if all index names are valid
valid_indices <- c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "evi", "ewi", "sr", "savi")
invalid_indices <- setdiff(indices, valid_indices)
# stop and print error message if they are not valid
if (length(invalid_indices) > 0) {
stop(paste("Invalid index names:", paste(invalid_indices, collapse = ", ")))
}
##############################################################
# handle case sensitivity of raster names but store old names
original_names <- names(raster)
names(raster) <- tolower(names(raster))
# create empty list and string to store index values and their respective names
index_values <- list()
index_names <- c()
# calculate the specified indices if the bands needed are provided
if ("ndvi" %in% indices) {
if (!all(c("red", "nir") %in% names(raster))) {
stop("Input raster must have 'red' and 'nir' bands for NDVI calculation.")
}
message("Calculating NDVI ...")
index_values$NDVI <- (raster$nir - raster$red) / (raster$nir + raster$red)
index_names <- c(index_names, "NDVI")
message("Done")
}
if ("ndwi" %in% indices) {
if (!all(c("green", "nir") %in% names(raster))) {
stop("Input raster must have 'green' and 'nir' bands for NDWI calculation.")
}
message("Calculating NDWI ...")
index_values$NDWI <- (raster$green - raster$nir) / (raster$green + raster$nir)
index_names <- c(index_names, "NDWI")
message("Done")
}
if ("ndbi" %in% indices) {
if (!all(c("swir1", "nir") %in% names(raster))) {
stop("Input raster must have 'swir1' and 'nir' bands for NDBI calculation.")
}
message("Calculating NDBI ...")
index_values$NDBI <- (raster$swir1 - raster$nir) / (raster$swir1 + raster$nir)
index_names <- c(index_names, "NDBI")
message("Done")
}
if ("ndmi" %in% indices) {
if (!all(c("nir", "swir1") %in% names(raster))) {
stop("Input raster must have 'nir' and 'swir1' bands for NDMI calculation.")
}
message("Calculating NDMI ...")
index_values$NDMI <- (raster$nir - raster$swir1) / (raster$nir + raster$swir1)
index_names <- c(index_names, "NDMI")
message("Done")
}
if ("ndsi" %in% indices) {
if (!all(c("green", "swir1") %in% names(raster))) {
stop("Input raster must have 'green' and 'swir1' bands for NDSI calculation.")
}
message("Calculating NDSI ...")
index_values$NDSI <- (raster$green - raster$swir1) / (raster$green + raster$swir1)
index_names <- c(index_names, "NDSI")
message("Done")
}
if ("evi" %in% indices) {
if (!all(c("blue", "red", "nir") %in% names(raster))) {
stop("Input raster must have 'blue', 'red' and 'nir' bands for EVI calculation.")
}
message("Calculating EVI ...")
index_values$EVI <- 2.5 * ((raster$nir - raster$red) / (raster$nir + 6*raster$red - 7.5*raster$blue + 1))
index_value$EVI <- index_value$EVI[!is.na(index_value$EVI)]
index_names <- c(index_names, "EVI")
message("Done")
}
if ("ewi" %in% indices) {
if (!all(c("green", "swir1") %in% names(raster))) {
stop("Input raster must have 'green' and 'swir1' bands for EWI calculation.")
}
message("Calculating EWI ...")
index_values$EWI <- 2.5 * ((raster$green - raster$swir1) / (raster$green + 2.4*raster$swir1 + 1))
index_names <- c(index_names, "EWI")
message("Done")
}
if ("sr" %in% indices) {
if (!all(c("red", "nir") %in% names(raster))) {
stop("Input raster must have 'red' and 'nir' bands for SR calculation.")
}
message("Calculating SR ...")
index_values$SR <- raster$nir / raster$red
index_names <- c(index_names, "SR")
message("Done")
}
if ("savi" %in% indices) {
if (!all(c("green", "swir1") %in% names(raster))) {
stop("Input raster must have 'green' and 'swir1' bands for SAVI calculation.")
}
if (is.null(L)) {
stop("Input 'L' must be specified for calculating the SAVI")
}
message("Calculating SAVI ...")
index_values$SAVI <- (raster$nir - raster$red) / ((raster$nir + raster$red + L) * (1 + L))
index_names <- c(index_names, "SAVI")
message("Done")
}
# return to the old colnames
names(raster) <- original_names
# add the specified indices to the raster
for (index_name in names(index_values)) {
add(raster) <- index_values[[index_name]]
}
# name them in the raster
names(raster)[(nlyr(raster) - length(index_values) + 1):nlyr(raster)] <- names(index_values)
return(raster)
}
Sebangau_indices <- calc_indices(Sebangau_renamed, indices = ("evi"))
calc_indices <- function(raster, indices = c("ndvi", "ndwi"), L = NULL) {
#### validating the input and stop if something is wrong ####
if (missing(raster)) {
stop("raster input missing")
}
if (!is.character(indices)) {
stop("Parameter 'indices' must be a character vector.")
}
# handle case sensibility of indices input
indices = tolower(indices)
# check if all index names are valid
valid_indices <- c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "evi", "ewi", "sr", "savi")
invalid_indices <- setdiff(indices, valid_indices)
# stop and print error message if they are not valid
if (length(invalid_indices) > 0) {
stop(paste("Invalid index names:", paste(invalid_indices, collapse = ", ")))
}
##############################################################
# handle case sensitivity of raster names but store old names
original_names <- names(raster)
names(raster) <- tolower(names(raster))
# create empty list and string to store index values and their respective names
index_values <- list()
index_names <- c()
# calculate the specified indices if the bands needed are provided
if ("ndvi" %in% indices) {
if (!all(c("red", "nir") %in% names(raster))) {
stop("Input raster must have 'red' and 'nir' bands for NDVI calculation.")
}
message("Calculating NDVI ...")
index_values$NDVI <- (raster$nir - raster$red) / (raster$nir + raster$red)
index_names <- c(index_names, "NDVI")
message("Done")
}
if ("ndwi" %in% indices) {
if (!all(c("green", "nir") %in% names(raster))) {
stop("Input raster must have 'green' and 'nir' bands for NDWI calculation.")
}
message("Calculating NDWI ...")
index_values$NDWI <- (raster$green - raster$nir) / (raster$green + raster$nir)
index_names <- c(index_names, "NDWI")
message("Done")
}
if ("ndbi" %in% indices) {
if (!all(c("swir1", "nir") %in% names(raster))) {
stop("Input raster must have 'swir1' and 'nir' bands for NDBI calculation.")
}
message("Calculating NDBI ...")
index_values$NDBI <- (raster$swir1 - raster$nir) / (raster$swir1 + raster$nir)
index_names <- c(index_names, "NDBI")
message("Done")
}
if ("ndmi" %in% indices) {
if (!all(c("nir", "swir1") %in% names(raster))) {
stop("Input raster must have 'nir' and 'swir1' bands for NDMI calculation.")
}
message("Calculating NDMI ...")
index_values$NDMI <- (raster$nir - raster$swir1) / (raster$nir + raster$swir1)
index_names <- c(index_names, "NDMI")
message("Done")
}
if ("ndsi" %in% indices) {
if (!all(c("green", "swir1") %in% names(raster))) {
stop("Input raster must have 'green' and 'swir1' bands for NDSI calculation.")
}
message("Calculating NDSI ...")
index_values$NDSI <- (raster$green - raster$swir1) / (raster$green + raster$swir1)
index_names <- c(index_names, "NDSI")
message("Done")
}
if ("evi" %in% indices) {
if (!all(c("blue", "red", "nir") %in% names(raster))) {
stop("Input raster must have 'blue', 'red' and 'nir' bands for EVI calculation.")
}
message("Calculating EVI ...")
temp_evi <- 2.5 * ((raster$nir - raster$red) / (raster$nir + 6*raster$red - 7.5*raster$blue + 1))
index_value$EVI <- temp_evi[!is.na(temp_evi)]
index_names <- c(index_names, "EVI")
message("Done")
}
if ("ewi" %in% indices) {
if (!all(c("green", "swir1") %in% names(raster))) {
stop("Input raster must have 'green' and 'swir1' bands for EWI calculation.")
}
message("Calculating EWI ...")
index_values$EWI <- 2.5 * ((raster$green - raster$swir1) / (raster$green + 2.4*raster$swir1 + 1))
index_names <- c(index_names, "EWI")
message("Done")
}
if ("sr" %in% indices) {
if (!all(c("red", "nir") %in% names(raster))) {
stop("Input raster must have 'red' and 'nir' bands for SR calculation.")
}
message("Calculating SR ...")
index_values$SR <- raster$nir / raster$red
index_names <- c(index_names, "SR")
message("Done")
}
if ("savi" %in% indices) {
if (!all(c("green", "swir1") %in% names(raster))) {
stop("Input raster must have 'green' and 'swir1' bands for SAVI calculation.")
}
if (is.null(L)) {
stop("Input 'L' must be specified for calculating the SAVI")
}
message("Calculating SAVI ...")
index_values$SAVI <- (raster$nir - raster$red) / ((raster$nir + raster$red + L) * (1 + L))
index_names <- c(index_names, "SAVI")
message("Done")
}
# return to the old colnames
names(raster) <- original_names
# add the specified indices to the raster
for (index_name in names(index_values)) {
add(raster) <- index_values[[index_name]]
}
# name them in the raster
names(raster)[(nlyr(raster) - length(index_values) + 1):nlyr(raster)] <- names(index_values)
return(raster)
}
Sebangau_indices <- calc_indices(Sebangau_renamed, indices = ("evi"))
calc_indices <- function(raster, indices = c("ndvi", "ndwi"), L = NULL) {
#### validating the input and stop if something is wrong ####
if (missing(raster)) {
stop("raster input missing")
}
if (!is.character(indices)) {
stop("Parameter 'indices' must be a character vector.")
}
# handle case sensibility of indices input
indices = tolower(indices)
# check if all index names are valid
valid_indices <- c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "evi", "ewi", "sr", "savi")
invalid_indices <- setdiff(indices, valid_indices)
# stop and print error message if they are not valid
if (length(invalid_indices) > 0) {
stop(paste("Invalid index names:", paste(invalid_indices, collapse = ", ")))
}
##############################################################
# handle case sensitivity of raster names but store old names
original_names <- names(raster)
names(raster) <- tolower(names(raster))
# create empty list and string to store index values and their respective names
index_values <- list()
index_names <- c()
# calculate the specified indices if the bands needed are provided
if ("ndvi" %in% indices) {
if (!all(c("red", "nir") %in% names(raster))) {
stop("Input raster must have 'red' and 'nir' bands for NDVI calculation.")
}
message("Calculating NDVI ...")
index_values$NDVI <- (raster$nir - raster$red) / (raster$nir + raster$red)
index_names <- c(index_names, "NDVI")
message("Done")
}
if ("ndwi" %in% indices) {
if (!all(c("green", "nir") %in% names(raster))) {
stop("Input raster must have 'green' and 'nir' bands for NDWI calculation.")
}
message("Calculating NDWI ...")
index_values$NDWI <- (raster$green - raster$nir) / (raster$green + raster$nir)
index_names <- c(index_names, "NDWI")
message("Done")
}
if ("ndbi" %in% indices) {
if (!all(c("swir1", "nir") %in% names(raster))) {
stop("Input raster must have 'swir1' and 'nir' bands for NDBI calculation.")
}
message("Calculating NDBI ...")
index_values$NDBI <- (raster$swir1 - raster$nir) / (raster$swir1 + raster$nir)
index_names <- c(index_names, "NDBI")
message("Done")
}
if ("ndmi" %in% indices) {
if (!all(c("nir", "swir1") %in% names(raster))) {
stop("Input raster must have 'nir' and 'swir1' bands for NDMI calculation.")
}
message("Calculating NDMI ...")
index_values$NDMI <- (raster$nir - raster$swir1) / (raster$nir + raster$swir1)
index_names <- c(index_names, "NDMI")
message("Done")
}
if ("ndsi" %in% indices) {
if (!all(c("green", "swir1") %in% names(raster))) {
stop("Input raster must have 'green' and 'swir1' bands for NDSI calculation.")
}
message("Calculating NDSI ...")
index_values$NDSI <- (raster$green - raster$swir1) / (raster$green + raster$swir1)
index_names <- c(index_names, "NDSI")
message("Done")
}
if ("evi" %in% indices) {
if (!all(c("blue", "red", "nir") %in% names(raster))) {
stop("Input raster must have 'blue', 'red' and 'nir' bands for EVI calculation.")
}
message("Calculating EVI ...")
index_values$EVI <- 2.5 * ((raster$nir - raster$red) / (raster$nir + 6*raster$red - 7.5*raster$blue + 1))
index_names <- c(index_names, "EVI")
message("Done")
}
if ("ewi" %in% indices) {
if (!all(c("green", "swir1") %in% names(raster))) {
stop("Input raster must have 'green' and 'swir1' bands for EWI calculation.")
}
message("Calculating EWI ...")
index_values$EWI <- 2.5 * ((raster$green - raster$swir1) / (raster$green + 2.4*raster$swir1 + 1))
index_names <- c(index_names, "EWI")
message("Done")
}
if ("sr" %in% indices) {
if (!all(c("red", "nir") %in% names(raster))) {
stop("Input raster must have 'red' and 'nir' bands for SR calculation.")
}
message("Calculating SR ...")
index_values$SR <- raster$nir / raster$red
index_names <- c(index_names, "SR")
message("Done")
}
if ("savi" %in% indices) {
if (!all(c("green", "swir1") %in% names(raster))) {
stop("Input raster must have 'green' and 'swir1' bands for SAVI calculation.")
}
if (is.null(L)) {
stop("Input 'L' must be specified for calculating the SAVI")
}
message("Calculating SAVI ...")
index_values$SAVI <- (raster$nir - raster$red) / ((raster$nir + raster$red + L) * (1 + L))
index_names <- c(index_names, "SAVI")
message("Done")
}
# return to the old colnames
names(raster) <- original_names
# add the specified indices to the raster
for (index_name in names(index_values)) {
index_values[[index_name]] <- index_values[[index_name]][!is.na(index_values[[index_name]])]
add(raster) <- index_values[[index_name]]
}
# name them in the raster
names(raster)[(nlyr(raster) - length(index_values) + 1):nlyr(raster)] <- names(index_values)
return(raster)
}
Sebangau_indices <- calc_indices(Sebangau_renamed, indices = ("evi"))
library(terra)
Sebangau_indices <- calc_indices(Sebangau_renamed, indices = ("evi"))
