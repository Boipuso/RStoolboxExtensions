message("Calculating SR ...")
index_values$SR <- raster$nir / raster$red
index_names <- c(index_names, "SR")
message("Done")
}
if ("savi" %in% indices) {
if (!all(c("green", "swir1") %in% names(raster))) {
stop("Input raster must have 'green' and 'swir1' bands for SAVI calculation.")
}
if (is.null(L)) {
stop("Input 'L' must be specified for calculating the SAVI")
}
message("Calculating SAVI ...")
index_values$SAVI <- (raster$nir - raster$red) / ((raster$nir + raster$red + L) * (1 + L))
index_names <- c(index_names, "SAVI")
message("Done")
}
# return to the old colnames
names(raster) <- original_names
# add the specified indices to the raster
for (index_name in names(index_values)) {
add(raster) <- index_values[[index_name]]
}
# name them in the raster
names(raster)[(nlyr(raster) - length(index_values) + 1):nlyr(raster)] <- names(index_values)
# # Function to remove NA values from a raster
# remove_NA <- function(raster) {
#   return(raster[!is.na(raster)])
# }
#
# #remove Na from every new index layer
# for (name in names(index_values)) {
#   raster[[name]] <- remove_NA(raster[[name]])
# }
return(raster)
}
Sebangau_indices <- calc_indices(Sebangau_renamed, indices= c("evi"), L = 0.5)
terra::plot(Sebangau_indices$EVI)
terra::plot(Sebangau_indices$EVI)
evi <- terra::subset(Sebangau_indices, "EVI")
mean(evi)
Sebangau_indices <- calc_indices(Sebangau_renamed, indices= c("ewi"), L = 0.5)
terra::plot(Sebangau_indices$EWI)
ewi <- terra::subset(Sebangau_indices, "EVI")
ewi <- terra::subset(Sebangau_indices, "EWI")
mean(ewi)
terra::plot(Sebangau_indices$Blue)
terra::plot(Sebangau_indices$Red)
mean(Sebangau_indices$Red)
# retrieve the sample raster data from the package
# the sample data consists of 2 rasters of the Sebangau Nationalpark in Borneo from the years 20115 and 2023 and training points for change detection analyses.
Sebangau15 <- system.file("extdata", "Sebangau15.tif", package = "RStoolboxExtensions")
Sebangau15 <- rast_sample_read(Sebangau15)
Sebangau23 <- system.file("extdata", "Sebangau23.tif", package = "RStoolboxExtensions")
Sebangau23 <- rast_sample_read(Sebangau23)
# read sample sf file of the RStoolboxExtensions package
trainPoints <- system.file("extdata", "trainPoints.geojson", package = "RStoolboxExtensions")
trainPoints <- sf_sample_read(trainPoints)
names(trainPoints)
getwd()
roxygen2::roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygen2::roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = feature_collection,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = FALSE,
indices = c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "ewi", "sr", "savi"),
trainPartition = 0.66
)
library(RStoolboxExtensions)
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = feature_collection,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = FALSE,
indices = c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "ewi", "sr", "savi"),
trainPartition = 0.66
)
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = trainPoints,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = FALSE,
indices = c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "ewi", "sr", "savi"),
trainPartition = 0.66
)
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau15,
img2 = Sebangau23,
train_features = trainPoints,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = FALSE,
indices = c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "ewi", "sr", "savi"),
trainPartition = 0.66
)
# import the scene and features
Sebangau <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_23median.tif')
Sebangau_15 <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_15median.tif')
feature_collection <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/exported_feature_collection.geojson")
# reassigning the landcvoer values to be a character description of the class instead of numerical values
landcover <- c('forest','nonforest','afforestation','deforestation')
feature_collection$landcover <- landcover[feature_collection$landcover]
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = feature_collection,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = FALSE,
indices = c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "ewi", "sr", "savi"),
trainPartition = 0.66
)
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = feature_collection,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = TRUE,
indices = c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "ewi", "sr", "savi"),
trainPartition = 0.66
)
roxygen2::roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
# import the scene and features
Sebangau <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_23median.tif')
Sebangau_15 <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_15median.tif')
feature_collection <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/exported_feature_collection.geojson")
# reassigning the landcvoer values to be a character description of the class instead of numerical values
landcover <- c('forest','nonforest','afforestation','deforestation')
feature_collection$landcover <- landcover[feature_collection$landcover]
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = feature_collection,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = TRUE,
indices = c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "ewi", "sr", "savi"),
L = 0.5,
trainPartition = 0.66
)
library(RStoolboxExtensions)
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = feature_collection,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = TRUE,
indices = c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "ewi", "sr", "savi"),
L = 0.5,
trainPartition = 0.66
)
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = feature_collection,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = FALSE,
indices = c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "ewi", "sr", "savi"),
L = 0.5,
trainPartition = 0.66
)
class_img <- extr_polygons(class_img, saveLoc = FALSE)
class_img <-asC$superClass_img
extrPols <- extr_polygons(class_img, saveLoc = FALSE)
terra::plot(extrPols$forest)
terra::plot(extrPols$forest)
getwd()
terra::plot(extrPols$afforestation)
getwd()
terra::plot(asC$superClass_img)
extrPols_NEW <- extr_polygons(class_img, saveLoc = TRUE)
extr_polygons <- function(class_img,
saveLoc = TRUE,
datatype = "gpkg",
class_col = "class",
append = FALSE,
out_dir = "class_polygons") {
#### validating the input and stop if something is wrong ####
if (missing(class_img)) {
stop("'class_img' input missing")
}
if (!is.character(datatype)) {
stop("Parameter 'datatype' must be a character.")
}
if (!is.character(class_col)) {
stop("Parameter 'class_col' must be a character.")
}
if (!is.character(out_dir)) {
stop("Parameter 'out_dir' must be a character.")
}
# check if 'class_col' exists in the raster colnames
if (!(class_col %in% names(class_img))) {
stop("Specified 'class_col' does not exist in the raster attributes. Please provide a valid column name.")
}
##############################################################
# get unique values in the raster to loop over them
unique_values <- unique(class_img[[class_col]])
# remove NA values if present
unique_values <- unique_values[!is.na(unique_values)]
# create an empty list to store polygons while looping
polygons_list <- list()
# create a directory to save the polygons if it doesn't exist already
if (!dir.exists(out_dir)) {
dir.create(out_dir)
}
# loop over unique values (classes) to create binary raster for each class and convert them to polygons
for (value in unique_values) {
# create a binary raster for each class
binary_raster <- ifel(class_img[[class_col]] == value, 1, NA_integer_)
# convert binary raster to polygons
polygons <- as.polygons(binary_raster)
# convert polygons to sf object
sf_polygons <- st_as_sf(polygons)
# add polygons to the list for the environment output
polygons_list[[as.character(value)]] <- sf_polygons
# if specified by the user, save the polygons in a local output folder
file_name <- paste0(out_dir,"/", as.character(value),".", datatype)
st_write(sf_polygons, file_name, append = append)
}
return(polygons_list)
}
extrPols_new <- extr_polygons(class_img, saveLoc = TRUE)
gc()
library(RStoolboxExtensions)
# import the scene and features
Sebangau <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_23median.tif')
Sebangau_15 <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_15median.tif')
feature_collection <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/exported_feature_collection.geojson")
training_polygons <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/training_polygons.geojson")
# reassigning the landcvoer values to be a character description of the class instead of numerical values
landcover <- c('forest','nonforest','afforestation','deforestation')
training_polygons$landcover <- landcover[training_polygons$landcover]
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = training_polygons,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = TRUE,
indices = c("ndsi", "ewi", "sr", "savi"),
L = 0.5,
trainPartition = 0.66
)
class_img <-asC$superClass_img
terra::plot(asC$superClass_img)
extrPols_new <- extr_polygons(class_img, saveLoc = FALSE)
accuracy <- asC$modelFit
accuracy
terra::plot(extrPols_new$afforestation)
extrRast <- extr_rasters(class_img, extrPols_new)
terra::plot(extrRast$afforestation)
terra::plot(extrRast$forest)
# Define a function to download the data
download_data <- function(url, destfile) {
download.file(url, destfile = destfile, method = "auto")
}
# List of file URLs and corresponding filenames
files_to_download <- list(
# "trainPoints.geojson" = "https://drive.google.com/uc?export=download&id=1Pr5wfzFOB-cZed2jZhBnmvXTzJAO2Knc",
"trainPolygons.geojson" = "https://drive.google.com/uc?export=download&id=1m26Z-XjhcjzRXimcZn15zRrItiLvvAvN",
"Sebangau15.tif" = "https://drive.google.com/uc?export=download&id=1bvj9zXhCLISi1l6ziBrNoghKEZ2Vq9tE",
"Sebangau23.tif" = "https://drive.google.com/uc?export=download&id=1yzPhqJxI5N7N57nHiuqq8PQD0si1tNs0"
)
# Loop over each file URL and filename pair
for (filename in names(files_to_download)) {
url <- files_to_download[[filename]]
systemfile <- system.file("extdata", package = "RStoolboxExtensions")
destfile <- paste0(systemfile, "/", filename)
# Check if the data file exists, if not, download it
if (!file.exists(destfile)) {
download_data(url, destfile)
}
}
# read sample raster files of the RStoolboxExtensions package
Sebangau15 <- system.file("extdata", "Sebangau15.tif", package = "RStoolboxExtensions")
Sebangau15 <- rast_sample_read(Sebangau15)
Sebangau23 <- system.file("extdata", "Sebangau23.tif", package = "RStoolboxExtensions")
Sebangau23 <- rast_sample_read(Sebangau23)
# read sample sf file of the RStoolboxExtensions package
trainPolygons <- system.file("extdata", "trainPolygons.geojson", package = "RStoolboxExtensions")
trainPolygons <- sf_sample_read(trainPolygons)
trainPolygons
# read sample raster files of the RStoolboxExtensions package
Sebangau15 <- system.file("extdata", "Sebangau15.tif", package = "RStoolboxExtensions")
# import the scene and features
Sebangau <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/Sebangau23.tif')
Sebangau_15 <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/Sebangau15.tif')
training_polygons <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/trainPolygons.geojson")
Sebangau15 <- rast_sample_read(Sebangau15)
training_po <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/trainPolygons.geojson")
training_po <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/trainPolygons.geojson")
# import the scene and features
Sebangau <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/Sebangau23.tif')
Sebangau_15 <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/Sebangau15.tif')
training_po <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/trainPolygons.geojson")
training_polygons <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/trainPolygons.geojson")
training_polygons$landcover <- landcover[training_polygons$landcover]
# reassigning the landcvoer values to be a character description of the class instead of numerical values
landcover <- c('forest','nonforest','afforestation','deforestation')
training_polygons$landcover <- landcover[training_polygons$landcover]
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = training_polygons,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = TRUE,
indices = c("ndsi", "ewi", "sr", "savi"),
L = 0.5,
trainPartition = 0.66
)
class_img <-asC$superClass_img
accuracy <- asC$modelFit
accuracy
terra::plot(asC$superClass_img)
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC_2 <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = training_polygons,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = TRUE,
indices = c("ndvi", "ndwi", "ndbi", "ndmi", "ndsi", "ewi", "sr", "savi"),
L = 0.5,
trainPartition = 0.66
)
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC_2 <- auto_superClass(img = Sebangau,
img2 = Sebangau_15,
train_features = training_polygons,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = TRUE,
indices = c( "sr", "savi"),
L = 0.5,
trainPartition = 0.66
)
etwd()
getwd()
roxygen2::roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
Sebangau_15$
devtools::install_github("Boipuso/RStoolboxExtensions")
Sebangau_15$
install.packages("devtools")
Sebangau_15$
library(devtools)
Sebangau_15$
library(devtools)
Sebangau_15$
library(devtools)
install.packages("devtools")
Sebangau_15$
library(devtools)
Sebangau_15 <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/Sebangau15.tif')
# read sample raster files of the RStoolboxExtensions package
Sebangau_15 <- system.file("extdata", "Sebangau15.tif", package = "RStoolboxExtensions")
Sebangau_15 <- rast_sample_read(Sebangau15)
library(RStoolboxExtensions)
devtools::install_github("Boipuso/RStoolboxExtensions")
devtools::install_github("Boipuso/RStoolboxExtensions")
# read sample raster files of the RStoolboxExtensions package
Sebangau15 <- system.file("extdata", "Sebangau15.tif", package = "RStoolboxExtensions")
Sebangau15 <- rast_sample_read(Sebangau15)
library(RStoolboxExtensions)
Sebangau15 <- rast_sample_read(Sebangau15)
Sebangau23 <- system.file("extdata", "Sebangau23.tif", package = "RStoolboxExtensions")
Sebangau23 <- rast_sample_read(Sebangau23)
# read sample sf file of the RStoolboxExtensions package
trainPolygons <- system.file("extdata", "trainPolygons.geojson", package = "RStoolboxExtensions")
trainPolygons <- sf_sample_read(trainPolygons)
terra::plot(Sebangau23$SR_B2)
Sebangau_15$
getwd()
roxygen2::roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
devtools::install_github("Boipuso/RStoolboxExtensions")
devtools::install_github("Boipuso/RStoolboxExtensions")
# read sample raster files of the RStoolboxExtensions package
Sebangau15 <- system.file("extdata", "Sebangau15.tif", package = "RStoolboxExtensions")
Sebangau15 <- rast_sample_read(Sebangau15)
library(RStoolboxExtensions)
# read sample raster files of the RStoolboxExtensions package
Sebangau15 <- system.file("extdata", "Sebangau15.tif", package = "RStoolboxExtensions")
Sebangau15 <- rast_sample_read(Sebangau15)
Sebangau23 <- system.file("extdata", "Sebangau23.tif", package = "RStoolboxExtensions")
Sebangau23 <- rast_sample_read(Sebangau23)
# read sample sf file of the RStoolboxExtensions package
trainPolygons <- system.file("extdata", "trainPolygons.geojson", package = "RStoolboxExtensions")
trainPolygons <- sf_sample_read(trainPolygons)
trainPoints <- system.file("extdata", "trainPoints.geojson", package = "RStoolboxExtensions")
trainPoints <- sf_sample_read(trainPoints)
# reassigning the landcvoer values to be a character description of the class instead of numerical values
landcover <- c('forest','nonforest','afforestation','deforestation')
feature_collection$landcover <- landcover[feature_collection$landcover]
training_polygons$landcover <- landcover[training_polygons$landcover]
trainPoints$landcover <- landcover[trainPoints$landcover]
trainPolygons$landcover <- landcover[trainPolygons$landcover]
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau15,
img2 = Sebangau23,
train_features = trainPoints,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = TRUE,
indices = c( "sr", "savi"),
L = 0.5,
trainPartition = 0.66
)
i
class_img <-asC$superClass_img
accuracy <- asC$modelFit
accuracy
terra::plot(extrPols_new$afforestation)
terra::plot(asC$superClass_img)
# read sample sf file of the RStoolboxExtensions package
trainPolygons <- system.file("extdata", "trainPolygons.geojson", package = "RStoolboxExtensions")
trainPolygons <- sf_sample_read(trainPolygons)
trainPoints <- system.file("extdata", "trainPoints.geojson", package = "RStoolboxExtensions")
trainPoints <- sf_sample_read(trainPoints)
head(trainPoints$landcover)
roxygen2::roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
accuracy
# read sample raster files of the RStoolboxExtensions package
Sebangau15 <- system.file("extdata", "Sebangau15.tif", package = "RStoolboxExtensions")
Sebangau15 <- rast_sample_read(Sebangau15)
Sebangau23 <- system.file("extdata", "Sebangau23.tif", package = "RStoolboxExtensions")
Sebangau23 <- rast_sample_read(Sebangau23)
# read sample sf file of the RStoolboxExtensions package
trainPolygons <- system.file("extdata", "trainPolygons.geojson", package = "RStoolboxExtensions")
trainPolygons <- sf_sample_read(trainPolygons)
# reassigning the landcvoer values to be a character description of the class instead of numerical values
landcover <- c('forest','nonforest','afforestation','deforestation')
trainPolygons$landcover <- landcover[trainPolygons$landcover]
# specify your input features
# here we choose that we do want to rename and subset the bands (renaming the bands is prerequisite for calculating indices) and also we want to calculate the indices NDVI and NDWI to improve our classification results
asC <- auto_superClass(img = Sebangau15,
img2 = Sebangau23,
train_features = trainPolygons,
responseCol = "landcover",
rename_bands = TRUE,
subsetting = TRUE,
sensor = "Landsat8",
calc_indices = TRUE,
indices = c( "ndvi", "savi"),
L = 0.5,
trainPartition = 0.66
)
class_img <-asC$superClass_img
accuracy <- asC$modelFit
accuracy
terra::writeRaster(class_img, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_img.tif")
extrPols_new <- extr_polygons(class_img, saveLoc = TRUE, out_dir = "inst/extdata")
getwd()
roxygen2::roxygenise(roxygen2::roxygenise())
roxygen2::roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
getwd()
roxygen2::roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
