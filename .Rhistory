if (!is.character(indices)) {
stop("Parameter 'indices' must be a character vector.")
}
# Handle case sensibility of indices input
indices = tolower(indices)
# Check if all index names are valid
valid_indices <- c("ndvi", "ndwi", "ndbi", "ndmi")
invalid_indices <- setdiff(indices, valid_indices)
# stop and print error message if they are not valid
if (length(invalid_indices) > 0) {
stop(paste("Invalid index names:", paste(invalid_indices)))
}
# create empty list and string to store index values and their respective names
index_values <- list()
index_names <- c()
# Handle case sensitivity of raster names but store old names
original_names <- names(raster)
names(raster) <- tolower(names(raster))
# Calculate the specified indices
if ("ndvi" %in% indices) {
if (!all(c("red", "nir") %in% names(raster))) {
stop("Input raster must have 'red' and 'nir' bands for NDVI calculation.")
}
index_values$ndvi <- (raster$nir - raster$red) / (raster$nir + raster$red)
index_names <- c(index_names, "NDVI")
}
if ("ndwi" %in% indices) {
if (!all(c("green", "nir") %in% names(raster))) {
stop("Input raster must have 'green' and 'nir' bands for NDWI calculation.")
}
index_values$ndwi <- (raster$green - raster$nir) / (raster$green + raster$nir)
index_names <- c(index_names, "NDWI")
}
if ("ndbi" %in% indices) {
if (!all(c("swir1", "nir") %in% names(raster))) {
stop("Input raster must have 'swir1' and 'nir' bands for NDBI calculation.")
}
index_values$ndbi <- (raster$swir1 - raster$nir) / (raster$swir1 + raster$nir)
index_names <- c(index_names, "NDBI")
}
if ("ndmi" %in% indices) {
if (!all(c("nir", "swir1") %in% names(raster))) {
stop("Input raster must have 'nir' and 'swir1' bands for NDMI calculation.")
}
index_values$ndmi <- (raster$nir - raster$swir1) / (raster$nir + raster$swir1)
index_names <- c(index_names, "NDMI")
}
# return to the old colnames
names(raster) <- original_names
# Add the specified indices to the raster
for (index_name in names(index_values)) {
add(raster) <- index_values[[index_name]]
}
# name them in the raster
# names(raster)[(nlyr(raster) - length(index_values) + 1):nlyr(raster)] <- names(index_values)
return(raster)
}
Sebangau_indices <- calc_indices(Sebangau_indices, indices = c("NDVI", "NDBI", "SAPI"))
Sebangau_indices <- calc_indices(Sebangau_indices, indices = c("NDVI", "NDBI", "SAPI", "steve"))
calc_indices <- function(raster, indices = c("ndvi", "ndwi", "ndbi", "ndmi")) {
# Input validation
if (!inherits(raster, "SpatRaster")) {
stop("Input 'raster' must be a SpatRaster object.")
}
# Parameter validation
if (!is.character(indices)) {
stop("Parameter 'indices' must be a character vector.")
}
# Handle case sensibility of indices input
indices = tolower(indices)
# Check if all index names are valid
valid_indices <- c("ndvi", "ndwi", "ndbi", "ndmi")
invalid_indices <- setdiff(indices, valid_indices)
# stop and print error message if they are not valid
if (length(invalid_indices) > 0) {
stop(paste("Invalid index names:", paste(invalid_indices, collapse = ", ")))
}
# create empty list and string to store index values and their respective names
index_values <- list()
index_names <- c()
# Handle case sensitivity of raster names but store old names
original_names <- names(raster)
names(raster) <- tolower(names(raster))
# Calculate the specified indices
if ("ndvi" %in% indices) {
if (!all(c("red", "nir") %in% names(raster))) {
stop("Input raster must have 'red' and 'nir' bands for NDVI calculation.")
}
index_values$ndvi <- (raster$nir - raster$red) / (raster$nir + raster$red)
index_names <- c(index_names, "NDVI")
}
if ("ndwi" %in% indices) {
if (!all(c("green", "nir") %in% names(raster))) {
stop("Input raster must have 'green' and 'nir' bands for NDWI calculation.")
}
index_values$ndwi <- (raster$green - raster$nir) / (raster$green + raster$nir)
index_names <- c(index_names, "NDWI")
}
if ("ndbi" %in% indices) {
if (!all(c("swir1", "nir") %in% names(raster))) {
stop("Input raster must have 'swir1' and 'nir' bands for NDBI calculation.")
}
index_values$ndbi <- (raster$swir1 - raster$nir) / (raster$swir1 + raster$nir)
index_names <- c(index_names, "NDBI")
}
if ("ndmi" %in% indices) {
if (!all(c("nir", "swir1") %in% names(raster))) {
stop("Input raster must have 'nir' and 'swir1' bands for NDMI calculation.")
}
index_values$ndmi <- (raster$nir - raster$swir1) / (raster$nir + raster$swir1)
index_names <- c(index_names, "NDMI")
}
# return to the old colnames
names(raster) <- original_names
# Add the specified indices to the raster
for (index_name in names(index_values)) {
add(raster) <- index_values[[index_name]]
}
# name them in the raster
# names(raster)[(nlyr(raster) - length(index_values) + 1):nlyr(raster)] <- names(index_values)
return(raster)
}
Sebangau_indices <- calc_indices(Sebangau_indices, indices = c("NDVI", "NDBI", "SAPI", "steve"))
Sebangau_indices <- calc_indices(Sebangau_indices, indices = c("NDVI", "NDBI"))
head(Sebangau_indices)
head(Sebangau_renamed)
head(Sebangau)
plot(Sebangau_indices$NIR)
plot(Sebangau_indices$nir)
calc_indices <- function(raster, indices = c("ndvi", "ndwi", "ndbi", "ndmi")) {
# Input validation
if (!inherits(raster, "SpatRaster")) {
stop("Input 'raster' must be a SpatRaster object.")
}
# Parameter validation
if (!is.character(indices)) {
stop("Parameter 'indices' must be a character vector.")
}
# Handle case sensibility of indices input
indices = tolower(indices)
# Check if all index names are valid
valid_indices <- c("ndvi", "ndwi", "ndbi", "ndmi")
invalid_indices <- setdiff(indices, valid_indices)
# stop and print error message if they are not valid
if (length(invalid_indices) > 0) {
stop(paste("Invalid index names:", paste(invalid_indices, collapse = ", ")))
}
# create empty list and string to store index values and their respective names
index_values <- list()
index_names <- c()
# Handle case sensitivity of raster names but store old names
original_names <- names(raster)
names(raster) <- tolower(names(raster))
# Calculate the specified indices
if ("ndvi" %in% indices) {
if (!all(c("red", "nir") %in% names(raster))) {
stop("Input raster must have 'red' and 'nir' bands for NDVI calculation.")
}
index_values$ndvi <- (raster$nir - raster$red) / (raster$nir + raster$red)
index_names <- c(index_names, "NDVI")
}
if ("ndwi" %in% indices) {
if (!all(c("green", "nir") %in% names(raster))) {
stop("Input raster must have 'green' and 'nir' bands for NDWI calculation.")
}
index_values$ndwi <- (raster$green - raster$nir) / (raster$green + raster$nir)
index_names <- c(index_names, "NDWI")
}
if ("ndbi" %in% indices) {
if (!all(c("swir1", "nir") %in% names(raster))) {
stop("Input raster must have 'swir1' and 'nir' bands for NDBI calculation.")
}
index_values$ndbi <- (raster$swir1 - raster$nir) / (raster$swir1 + raster$nir)
index_names <- c(index_names, "NDBI")
}
if ("ndmi" %in% indices) {
if (!all(c("nir", "swir1") %in% names(raster))) {
stop("Input raster must have 'nir' and 'swir1' bands for NDMI calculation.")
}
index_values$ndmi <- (raster$nir - raster$swir1) / (raster$nir + raster$swir1)
index_names <- c(index_names, "NDMI")
}
# return to the old colnames
names(raster) <- original_names
# Add the specified indices to the raster
for (index_name in names(index_values)) {
add(raster) <- index_values[[index_name]]
}
# name them in the raster
names(raster)[(nlyr(raster) - length(index_values) + 1):nlyr(raster)] <- names(index_values)
return(raster)
}
Sebangau_indices <- calc_indices(Sebangau_indices, indices = c("NDVI", "NDBI"))
Sebangau_indices <- calc_indices(Sebangau_renamed, indices = c("NDVI", "NDBI"))
calc_indices <- function(raster, indices = c("ndvi", "ndwi", "ndbi", "ndmi")) {
# Raster input validation
if (!inherits(raster, "SpatRaster")) {
stop("Input 'raster' must be a SpatRaster object.")
}
# Indices input validation
if (!is.character(indices)) {
stop("Parameter 'indices' must be a character vector.")
}
# Handle case sensibility of indices input
indices = tolower(indices)
# Check if all index names are valid
valid_indices <- c("ndvi", "ndwi", "ndbi", "ndmi")
invalid_indices <- setdiff(indices, valid_indices)
# stop and print error message if they are not valid
if (length(invalid_indices) > 0) {
stop(paste("Invalid index names:", paste(invalid_indices, collapse = ", ")))
}
# Handle case sensitivity of raster names but store old names
original_names <- names(raster)
names(raster) <- tolower(names(raster))
# create empty list and string to store index values and their respective names
index_values <- list()
#index_names <- c()
# Calculate the specified indices
if ("ndvi" %in% indices) {
if (!all(c("red", "nir") %in% names(raster))) {
stop("Input raster must have 'red' and 'nir' bands for NDVI calculation.")
}
index_values$ndvi <- (raster$nir - raster$red) / (raster$nir + raster$red)
#index_names <- c(index_names, "NDVI")
}
if ("ndwi" %in% indices) {
if (!all(c("green", "nir") %in% names(raster))) {
stop("Input raster must have 'green' and 'nir' bands for NDWI calculation.")
}
index_values$ndwi <- (raster$green - raster$nir) / (raster$green + raster$nir)
#index_names <- c(index_names, "NDWI")
}
if ("ndbi" %in% indices) {
if (!all(c("swir1", "nir") %in% names(raster))) {
stop("Input raster must have 'swir1' and 'nir' bands for NDBI calculation.")
}
index_values$ndbi <- (raster$swir1 - raster$nir) / (raster$swir1 + raster$nir)
#index_names <- c(index_names, "NDBI")
}
if ("ndmi" %in% indices) {
if (!all(c("nir", "swir1") %in% names(raster))) {
stop("Input raster must have 'nir' and 'swir1' bands for NDMI calculation.")
}
index_values$ndmi <- (raster$nir - raster$swir1) / (raster$nir + raster$swir1)
#index_names <- c(index_names, "NDMI")
}
# return to the old colnames
names(raster) <- original_names
# Add the specified indices to the raster
for (index_name in names(index_values)) {
add(raster) <- index_values[[index_name]]
}
# name them in the raster
#names(raster)[(nlyr(raster) - length(index_values) + 1):nlyr(raster)] <- names(index_values)
return(raster)
}
Sebangau_indices <- calc_indices(Sebangau_renamed, indices = c("NDVI", "NDBI"))
pp_features <- function(trainFeat, raster) {
# convert training features to sf cause superClass function has problems with sp objects
if (!inherits(trainFeat, "sf")) {
message("trainFeat is not a sf object: Converting trainFeat to 'sf' object...")
trainFeat <- st_as_sf(trainFeat)
}
#check if the transformation worked
if (!inherits(trainFeat, "sf")) {
stop("trainFeat cannot be converted to a sf object. Provide a data type that can be converted to sf")
}
# and bring them to the same crs for the classification to work
if (!identical(st_crs(trainFeat), st_crs(raster))) {
message("CRS mismatch: Transforming trainFeat to match the CRS of the raster...")
trainFeat <- st_transform(trainFeat, st_crs(raster))
}
#check if the transformation worked
if (!identical(st_crs(trainFeat), st_crs(raster))) {
stop("CRS of trainFeat cannot be converted to CRS of the raster. Provide fitting types of CRS for the conversion with st_transform()")
}
return(trainFeat)
}
feature_collection <- st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/exported_feature_collection.geojson")
library(sf)
feature_collection <- st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/exported_feature_collection.geojson")
training_polygons <- st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/training_polygons.geojson")
pp_points <- pp_features(feature_collection, Sebangau)
pp_features <- function(trainFeat, raster) {
# convert training features to sf cause superClass function has problems with sp objects
if (!inherits(trainFeat, "sf")) {
message("trainFeat is not a sf object: Converting trainFeat to 'sf' object...")
trainFeat <- st_as_sf(trainFeat)
#check if the transformation worked
if (!inherits(trainFeat, "sf")) {
stop("trainFeat cannot be converted to a sf object. Provide a data type that can be converted to sf")
}
else{
message("Conversion to sf objected completed")
}
}
else{
message("object is already a sf object")
}
# and bring them to the same crs for the classification to work
if (!identical(st_crs(trainFeat), st_crs(raster))) {
message("CRS mismatch: Transforming trainFeat to match the CRS of the raster...")
trainFeat <- st_transform(trainFeat, st_crs(raster))
#check if the transformation worked
if (!identical(st_crs(trainFeat), st_crs(raster))) {
stop("CRS of trainFeat cannot be converted to CRS of the raster. Provide fitting types of CRS for the conversion with st_transform()")
}
else{
message("Transformation to raster CRS completed")
}
}
else{
message("CRS of trainFeat and raster are already alligned")
}
return(trainFeat)
}
pp_points_2 <- pp_features(feature_collection, Sebangau)
pp_points_3 <- pp_features(pp_points, Sebangau)
rm(pp_points_2)
rm(pp_points_3)
?tryCatch
library(roxygen2)
# set working directory
getwd()
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
rm(list = c("calc_indices", "pp_features", "rename_bands"))
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
# import the scene and features
Sebangau <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_23median.tif')
Sebangau_15 <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_15median.tif')
feature_collection <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/exported_feature_collection.geojson")
# reassigning the landcvoer values to be a character description of the class instead of numerical values
landcover <- c('forest','nonforest','afforestation','deforestation')
feature_collection$landcover <- landcover[feature_collection$landcover]
Sclassification <- auto_superClass(img = Sebangau, img2 = Sebangau_15, train_features = feature_collection,
responseCol = "landcover", sensor = "Landsat9", indices = c("ndvi", "ndmi"))
Sclassification <- auto_superClass(img = Sebangau, img2 = Sebangau_15, train_features = feature_collection,
responseCol = "landcover", sensor = "Landsat8", indices = c("ndvi", "ndmi"))
library(RStoolboxExtensions)
Sclassification_2 <- auto_superClass(img = Sebangau, img2 = Sebangau_15, train_features = feature_collection,
responseCol = "landcover", sensor = "Landsat8", calc_indices = TRUE,
indices = c("ndvi", "ndmi"))
plot(Sclassification$superClass_img)
class_img <- Sclassification$superClass_img
plot(class_img)
library(RStoolboxExtensions)
# import the scene and features
Sebangau <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_23median.tif')
Sebangau_15 <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_15median.tif')
feature_collection <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/exported_feature_collection.geojson")
# reassigning the landcvoer values to be a character description of the class instead of numerical values
landcover <- c('forest','nonforest','afforestation','deforestation')
feature_collection$landcover <- landcover[feature_collection$landcover]
Sclassification_2 <- auto_superClass(img = Sebangau, img2 = Sebangau_15, train_features = feature_collection,
responseCol = "landcover", sensor = "Landsat8", calc_indices = TRUE,
indices = c("ndvi", "ndmi"))
class_img <- Sclassification_2$superClass_img
plot(class_img)
pp_raster <- Sclassification_2$PPraster
pp_raster$
plot(pp_raster$ndvi)
pp_raster$
plot(pp_raster[[2]])
pp_raster$
plot(pp_raster[2])
pp_raster$
terra::plot(class_img)
pp_raster$
terra::plot(class_img)
library(terra)
pp_raster$
terra::plot(class_img)
pp_raster$
plot(class_img)
plot(class_img)
library(RStoolboxExtensions)
extr_pols <- extr_polygons(class_img, class_col = "landcover")
class_img <- Sclassification_2$superClass_img
extr_pols <- extr_polygons(class_img, class_col = "landcover")
extr_pols <- extr_polygons(class_img, class_col = "class")
extr_pols <- extr_polygons(Sebangau, class_col = "landcover")
git add .
library(roxygen2)
getwd()
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
# import the scene and features
Sebangau <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_23median.tif')
extr_pols <- extr_polygons(class_img, class_col = "landcover")
library(usethis)
# import the scene and features
Sebangau <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_23median.tif')
Sebangau_15 <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_15median.tif')
terra::writeRaster(Sebangau15,
"C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/Sebangau15.tif")
terra::writeRaster(Sebangau_15,
"C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/Sebangau15.tif")
terra::writeRaster(Sebangau,
"C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/Sebangau23.tif")
feature_collection <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/exported_feature_collection.geojson")
training_polygons <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/training_polygons.geojson")
class(feature_collection)
class(training_polygons)
# reassigning the landcvoer values to be a character description of the class instead of numerical values
landcover <- c('forest','nonforest','afforestation','deforestation')
feature_collection$landcover <- landcover[feature_collection$landcover]
training_polygons$landcover <- landcover[training_polygons$landcover]
sf::st_write(feature_collection, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/trainPoints.geojson")
sf::st_write(training_polygons, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/trainPolygons.geojson")
library(RStoolboxExtensions)
system.file("extdata", "Sebangau15.tif", package = "RStoolboxExtensions")
?calc_indices
library(roxygen2)
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
?rast_sample_read
library(roxygen2)
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
?rename_bands
library(roxygen2)
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygenise("C:/Users/henni/Documents/Git/RStoolboxExtensions")
?rename_bands
library(RStoolboxExtensions)
?rename_bands
library(roxygen2)
getwd()
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
?calc_indices
library(RStoolboxExtensions)
?calc_indices
st_crs(Sebangau15)
library(roxygen2)
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
plibrary(roxygen2)
library(roxygen2)
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
?pp_features
?require
if (!require(sf)) {install.packages(sf)}
library(roxygen2)
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
?points_superClass
library(roxygen2)
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
load("~/Git/Eagle_1st_Semester/R_Project/clean_results.RData")
getwd()
terra::writeRaster(class_img, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_img")
class_img = class_img
terra::writeRaster(class_img, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_img")
# import the scene and features
Sebangau <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_23median.tif')
Sebangau_15 <- terra::rast('C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/L8_15median.tif')
training_polygons <- sf::st_read("C:/Users/henni/Documents/Git/Eagle_1st_Semester/R_Project/data/training_polygons.geojson")
# reassigning the landcvoer values to be a character description of the class instead of numerical values
landcover <- c('forest','nonforest','afforestation','deforestation')
training_polygons$landcover <- landcover[training_polygons$landcover]
Sclassification_2 <- auto_superClass(img = Sebangau, img2 = Sebangau_15, train_features = training_polygons,
responseCol = "landcover", sensor = "Landsat8", calc_indices = TRUE,
indices = c("ndvi", "ndmi"))
class_img <- Sclassification_2$superClass_img
terra::plot(class_img)
terra::writeRaster(class_img, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_img")
terra::writeRaster(class_img, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_img.tif")
# load classified sample image of the RStoolboxExtensions package
class_img_2 <- system.file("extdata", "class_img.tif", package = "RStoolboxExtensions")
# apply the function
class_polygons <- extr_polygons(class_img, out_dir = "test_output_polygons")
# apply the function
class_polygons <- extr_polygons(class_img, class_col = "class", out_dir = "test_output_polygons")
library(roxygen2)
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
# load classified sample image of the RStoolboxExtensions package
class_img <- system.file("extdata", "class_img.tif", package = "RStoolboxExtensions")
class_img <- rast_sample_read(class_img)
# apply the function
class_polygons <- extr_polygons(class_img, class_col = "class", out_dir = "test_output_polygons")
# the function returns a list of the (multi-)polygons
View(class_polygons)
sf::st_write(class_polygons, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_polygons.geojson")
rgdal::writeOGR(class_polygons, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_polygons.geojson")
sf::st_write(class_polygons, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_polygons.gpkg", driver = "GPKG")
rgdal::writeOGR(class_polygons, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_polygons.gpkg", driver = "GPKG")
?st_as_sp()
classPolygons <- st_as_sp(class_polygons)
classPolygons <- as(class_polygons, "Spatial")
classPolygons <- sapply(class_polygons, function(x) as(x, "Spatial"), simplify = FALSE)
rgdal::writeOGR(classPolygons, "C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/class_polygons.gpkg", driver = "GPKG")
class(classPolygons)
# apply the function
class_polygons <- extr_polygons(class_img, class_col = "class", out_dir = "inst/extdata")
getwd()
afforestation <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/afforestation.gpkg")
deforestation <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/deforestation.gpkg")
nonforest <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/nonforest.gpkg")
forest <- sf::st_read("C:/Users/henni/Documents/Git/RStoolboxExtensions/inst/extdata/forest.gpkg")
class_Polygons <- list(c(afforestation, deforestation, nonForest, forest))
class_Polygons <- list(c(afforestation, deforestation, nonforest, forest))
library(roxygen2)
roxygenize("C:/Users/henni/Documents/Git/RStoolboxExtensions")
library(RStoolboxExtensions)
