% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/auto_superClass.R
\name{auto_superClass}
\alias{auto_superClass}
\title{Automate Supervised Classification Process}
\usage{
auto_superClass(
  img,
  img2 = NULL,
  train_features,
  responseCol,
  sensor,
  subsetting = TRUE,
  rename_bands = TRUE,
  calc_indices = FALSE,
  indices = c("ndvi", "ndwi", "ndbi", "ndmi"),
  model = "rf",
  nSamples = 100,
  nSamplesV = 50,
  trainPartition = 0.66
)
}
\arguments{
\item{img}{A raster object representing the input image for classification.}

\item{img2}{Optional. A second raster object representing a second input image for change detection.}

\item{train_features}{A data frame containing the training features with locations.}

\item{responseCol}{The name of the column in \code{train_features} containing the response variable.}

\item{sensor}{The sensor type of the input raster(s). Used for band renaming if necessary.}

\item{subsetting}{Logical indicating whether to perform subsetting of bands. Defaults to TRUE.}

\item{rename_bands}{Logical indicating whether to rename bands based on sensor type. Defaults to TRUE.}

\item{calc_indices}{Logical indicating whether to calculate spectral indices. Defaults to FALSE.}

\item{indices}{Character vector specifying the spectral indices to be calculated if \code{calc_indices} is TRUE. Defaults to c("ndvi", "ndwi", "ndbi", "ndmi").}

\item{model}{The classification model to be used. Defaults to "rf" (random forest).}

\item{nSamples}{Integer (polygon based). Number of samples per land cover class. If NULL all pixels covered by training polygons are used (memory intensive!). Ignored if train_features consists of POINTs. Defaults to 100.}

\item{nSamplesV}{Integer. Number of validation samples per land cover class. If NULL all pixels covered by validation polygons are used (memory intensive!). Ignored if train_features consists of POINTs. Defaults to 50.}

\item{trainPartition}{The proportion of points or polygons to be used for training, rest is used for validation. Defaults to 0.66.}
}
\value{
A list containing the classified image, model fit information, pre-processed raster(s), and pre-processed training features.
}
\description{
Automates the process of conducting a supervised classification, including pre-processing of raster data and training features, model training, and classification.
Offers possibility to conduct a change detection by including a second raster input (assuming training features for change detection).
}
\details{
This function automates the entire process of conducting a supervised classification. It performs pre-processing of the input raster(s) (consisting of the \code{rename_bands} and \code{calc_indices} functions) and training features (consisting of the \code{pp_features} function), model training using the specified classification algorithm, and classification of the input raster(s) using the trained model. Depending on the geometry type of the training features (points or polygons), the appropriate training function (\code{points_superClass} or \code{superClass}) is called. The function returns a list containing the classified image, model fit information, pre-processed raster(s), and pre-processed training features for further analysis. The function deploys the superClass function from the RStoolbox package for the training of the model and the classification itself.
}
\examples{
# running the example may take up to several minutes as raster processing takes its time.
# I recommend to run the example in a script to get update messages in the console.

# read sample raster files of the RStoolboxExtensions package
Sebangau15 <- system.file("extdata", "Sebangau15.tif", package = "RStoolboxExtensions")
Sebangau15 <- rast_sample_read(Sebangau15)
Sebangau23 <- system.file("extdata", "Sebangau23.tif", package = "RStoolboxExtensions")
Sebangau23 <- rast_sample_read(Sebangau23)

# read sample sf file of the RStoolboxExtensions package
trainPoints <- system.file("extdata", "trainPoints.geojson", package = "RStoolboxExtensions")
trainPoints <- sf_sample_read(trainPoints)

# apply the function
asC_output <- auto_superClass(img = Sebangau15,
                              img2 = Sebangau23,
                              train_features = trainPoints,
                              responseCol = "landcover",
                              sensor = "Landsat8",
                              calc_indices = TRUE,
                              indices = c("ndvi", "ndbi"))

# check that the generated list contains all 4 output objects
names(asC_output)

# extract objects
class_img <- asC_output$superClass_img
pp_features <- asC_output$pp_features
pp_raster <- asC_output$pp_raster
accuracy <- asC_output$modelFit

# view the results
terra::plot(class_img)
View(accuracy)

}
